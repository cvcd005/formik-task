{"version":3,"sources":["Api/Api.js","MyForm/MyTextInput.jsx","MyForm/MyCheckbox.jsx","Spinner/index.js","Spinner/Spinner.jsx","MyForm/index.js","MyForm/MyForm.jsx","ContentWrapper/index.js","ContentWrapper/ContentWrapper.jsx","App/index.js","App/App.jsx","index.jsx"],"names":["sendForm","user","a","axios","post","response","submit","values","setSubmitting","resetForm","setFieldError","MyTextInput","label","props","useField","field","meta","className","htmlFor","name","touched","error","MyCheckbox","children","type","Spinner","MyForm","initialValues","password","passwordConfirmation","email","website","age","skills","acceptedTerms","validationSchema","Yup","max","required","min","matches","oneOf","url","of","onSubmit","isSubmitting","xs","sm","handleSubmit","placeholder","render","arrayHelpers","array","length","push","htmlType","onClick","map","friend","index","key","style","marginRight","disabled","shape","size","remove","reverse","ContentWrapper","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a9fe1a46.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst sendForm = async user => {\r\n  const response = await axios.post(\"http://localhost:5000/sign-up\", user);\r\n  return response;\r\n};\r\n\r\nconst submit = async (values, { setSubmitting, resetForm, setFieldError }) => {\r\n  try {\r\n    await sendForm(values);\r\n    resetForm();\r\n    setSubmitting(false);\r\n  } catch (error) {\r\n    if (error.response) {\r\n      setFieldError(\"email\", \"User with same email is already exist\");\r\n    } else {\r\n      resetForm();\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n};\r\n\r\nexport default submit;\r\n","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Row, Input } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <Row className=\"text-input\">\r\n      <label htmlFor={props.name}>{label}</label>\r\n      <Input {...field} {...props} />\r\n      {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default MyTextInput;\r\n\r\nMyTextInput.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Checkbox } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MyCheckbox = ({ children, ...props }) => {\r\n  const [field, meta] = useField({ ...props, type: 'checkbox' });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\" htmlFor={props.name}>\r\n        <Checkbox {...field} {...props}>\r\n          {children}\r\n        </Checkbox>\r\n      </label>\r\n      {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyCheckbox;\r\n\r\nMyCheckbox.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n};\r\n","import Spinner from \"./Spinner\";\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-wrapper\">\r\n      <div className=\"loadingio-spinner-spinner-dqnqjb0imij\">\r\n        <div className=\"ldio-yalp32kfxl\">\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n          <div />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import MyForm from \"./MyForm\";\r\n\r\nexport default MyForm;\r\n","import React from 'react';\r\nimport { Col, Button } from 'antd';\r\nimport * as Yup from 'yup';\r\nimport { Formik, Form, FieldArray, Field, ErrorMessage } from 'formik';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport submit from '../Api/Api';\r\n\r\nimport MyTextInput from './MyTextInput';\r\nimport MyCheckbox from './MyCheckbox';\r\nimport Spinner from '../Spinner';\r\n\r\nconst MyForm = () => (\r\n  <Formik\r\n    initialValues={{\r\n      name: '',\r\n      password: '',\r\n      passwordConfirmation: '',\r\n      email: '',\r\n      website: '',\r\n      age: 0,\r\n      skills: [],\r\n      acceptedTerms: false, // added for our checkbox\r\n    }}\r\n    validationSchema={Yup.object({\r\n      name: Yup.string()\r\n        .max(50, 'Must 50 characters or less')\r\n        .required('You must enter Name'),\r\n      password: Yup.string()\r\n        .min(8, 'Password is too short - should be 8 chars minimum.')\r\n        .max(40, 'Must be 40 characters or less')\r\n        .matches(/[0-9]+/, 'Password must contain at least one digit')\r\n        .matches(/[A-Z]+/, 'Password must contain an one uppercase character')\r\n        .matches(/^[a-zA-Z0-9]{8,}$/, 'Password have only latin letters and digits')\r\n        .required('You must enter password'),\r\n      passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n        .required('You must confirm password'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('You must enter email'),\r\n      website: Yup.string().url('Mustbe a valid url'),\r\n      age: Yup.number('Must be an integer')\r\n        .min(18, 'Must be in range of 18 and 65')\r\n        .max(65, 'Must be in range of 18 and 65')\r\n        .required('You must enter your age'),\r\n      skills: Yup.array().of(Yup.string()),\r\n      acceptedTerms: Yup.boolean()\r\n        .required('Required')\r\n        .oneOf([true], 'You must accept the terms and conditions.'),\r\n    })}\r\n    onSubmit={submit}\r\n  >\r\n    {props => {\r\n      if (props.isSubmitting) {\r\n        return <Spinner />;\r\n      }\r\n      return (\r\n        <Col className=\"text-input\" xs={20} sm={16}>\r\n          <Form onSubmit={props.handleSubmit} className=\"MyForm\">\r\n            <MyTextInput label=\"Name\" name=\"name\" type=\"text\" placeholder=\"Vasay\" />\r\n            <MyTextInput label=\"Password\" name=\"password\" type=\"password\" placeholder=\"password\" />\r\n            <MyTextInput\r\n              label=\"Password Confirmation\"\r\n              name=\"passwordConfirmation\"\r\n              type=\"password\"\r\n              placeholder=\"confirm password\"\r\n            />\r\n            <MyTextInput\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"jane@formik.com\"\r\n            />\r\n            <ErrorMessage name=\"Email\" />\r\n            <MyTextInput\r\n              label=\"Website\"\r\n              name=\"website\"\r\n              type=\"url\"\r\n              placeholder=\"http://www.site.com\"\r\n            />\r\n            <MyTextInput label=\"Age\" name=\"age\" type=\"number\" min={0} />\r\n            <FieldArray\r\n              name=\"skills\"\r\n              render={arrayHelpers => {\r\n                const array = props.values.skills;\r\n                if (array.length === 0) {\r\n                  array.push('');\r\n                }\r\n                return (\r\n                  <>\r\n                    Skills\r\n                    <div className=\"skillsWrapper\">\r\n                      <Button\r\n                        className=\"btn-add\"\r\n                        htmlType=\"button\"\r\n                        type=\"button\"\r\n                        onClick={() =>\r\n                          array[array.length - 1].length > 0 ? arrayHelpers.push('') : 0\r\n                        }\r\n                      >\r\n                        Add a Skill\r\n                      </Button>\r\n                      {array.map((friend, index) => (\r\n                          <div key={index} style={{ marginRight: '20px' }}>\r\n                            <Field\r\n                              className=\"skill\"\r\n                              name={`skills.${index}`}\r\n                              disabled={index !== array.length - 1}\r\n                            />\r\n                            {index === array.length - 1 ? null : (\r\n                              <Button\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                                htmlType=\"button\"\r\n                                onClick={() => arrayHelpers.remove(index)}\r\n                              >\r\n                                x\r\n                              </Button>\r\n                            )}\r\n                          </div>\r\n                        ))\r\n                        .reverse()}\r\n                    </div>\r\n                  </>\r\n                );\r\n              }}\r\n            />\r\n            <MyCheckbox name=\"acceptedTerms\">I accept the terms and conditions</MyCheckbox>\r\n            <Button type=\"submit\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      );\r\n    }}\r\n  </Formik>\r\n);\r\n\r\nexport default MyForm;\r\n","import ContentWrapper from \"./ContentWrapper\";\r\n\r\nexport default ContentWrapper;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContentWrapper = props => {\r\n  const { children } = props;\r\n  return <div className=\"contentWrapper\">{children}</div>;\r\n};\r\n\r\nexport default ContentWrapper;\r\n\r\nContentWrapper.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n};\r\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nimport MyForm from '../MyForm';\r\nimport ContentWrapper from '../ContentWrapper';\r\n\r\nimport './App.scss';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <ContentWrapper>\r\n      <MyForm />\r\n    </ContentWrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}