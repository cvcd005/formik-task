{"version":3,"sources":["Api/ValidSchema.js","Api/Api.js","MyForm/MyTextInput.jsx","MyForm/MyCheckbox.jsx","MyForm/MyForm.jsx","MyForm/index.js","ContentWrapper/index.js","ContentWrapper/ContentWrapper.jsx","App/index.js","App/App.jsx","index.jsx"],"names":["Yup","require","exports","validSchema","object","name","string","max","required","password","matches","min","passwordConfirmation","oneOf","ref","email","website","url","age","number","skills","array","of","acceptedTerms","boolean","API_URLS","signUp","user","a","axios","post","MyTextInput","label","props","useField","field","meta","className","htmlFor","touched","error","MyCheckbox","children","type","Schema","SubmitForm","values","setSubmitting","resetForm","setFieldError","response","data","MyForm","initialValues","currentSkill","validationSchema","onSubmit","xs","sm","handleSubmit","placeholder","render","arrayHelpers","onKeyPress","evt","key","preventDefault","length","push","setFieldValue","htmlType","onClick","map","friend","index","style","marginRight","shape","size","remove","isSubmitting","ContentWrapper","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.bc92a8fd.chunk.js","sourcesContent":["const Yup = require(\"yup\");\r\n\r\nexports.validSchema = Yup.object({\r\n  name: Yup.string()\r\n    .max(50, \"Must 50 characters or less\")\r\n    .required(\"You must enter Name\"),\r\n  password: Yup.string()\r\n    .matches(/^[a-zA-Z0-9]{0,}$/, \"Password have only latin letters and digits\")\r\n    .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n    .max(40, \"Must be 40 characters or less\")\r\n    .matches(/[0-9]+/, \"Password must contain at least one digit\")\r\n    .matches(/[A-Z]+/, \"Password must contain an one uppercase character\")\r\n    .required(\"You must enter password\"),\r\n  passwordConfirmation: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"You must confirm password\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email address\")\r\n    .required(\"You must enter email\"),\r\n  website: Yup.string().url(\"Mustbe a valid url\"),\r\n  age: Yup.number(\"Must be an integer\")\r\n    .min(18, \"Must be in range of 18 and 65\")\r\n    .max(65, \"Must be in range of 18 and 65\")\r\n    .required(\"You must enter your age\"),\r\n  skills: Yup.array().of(Yup.string()),\r\n  acceptedTerms: Yup.boolean()\r\n    .required(\"Required\")\r\n    .oneOf([true], \"You must accept the terms and conditions.\")\r\n});\r\n","import axios from \"axios\";\r\n\r\nconst API_URLS = {\r\n  BASE_URl: \"http://localhost:8080\",\r\n  REGISTER_USER: \"sign-up\"\r\n};\r\n\r\nconst signUp = async user => {\r\n  return axios.post(`${API_URLS.BASE_URl}/${API_URLS.REGISTER_USER}`, user);\r\n};\r\n\r\nexport default signUp;\r\n","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Row, Input } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <Row className=\"text-input\">\r\n      <label htmlFor={props.name}>{label}</label>\r\n      <Input {...field} {...props} />\r\n      {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default MyTextInput;\r\n\r\nMyTextInput.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Checkbox } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MyCheckbox = ({ children, ...props }) => {\r\n  const [field, meta] = useField({ ...props, type: 'checkbox' });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\" htmlFor={props.name}>\r\n        <Checkbox {...field} {...props}>\r\n          {children}\r\n        </Checkbox>\r\n      </label>\r\n      {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyCheckbox;\r\n\r\nMyCheckbox.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { Col, Button, Spin } from 'antd';\r\nimport { Formik, Form, FieldArray, Field, ErrorMessage } from 'formik';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport signUp from '../Api/Api';\r\n\r\nimport MyTextInput from './MyTextInput';\r\nimport MyCheckbox from './MyCheckbox';\r\n\r\nconst Schema = require('../Api/ValidSchema'); //такой импорт так как нужен для импорта старой ноды\r\n\r\nconst SubmitForm = async (values, { setSubmitting, resetForm, setFieldError }) => {\r\n  try {\r\n    await signUp(values);\r\n    resetForm();\r\n    setSubmitting(false);\r\n  } catch (error) {\r\n    if (error.response && error.response.data === 'USER_EXIST') {\r\n      setFieldError('email', 'User with same email is already exist');\r\n    } else {\r\n      resetForm();\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n};\r\n\r\nconst MyForm = () => (\r\n  <Formik\r\n    initialValues={{\r\n      name: '',\r\n      password: '',\r\n      passwordConfirmation: '',\r\n      email: '',\r\n      website: '',\r\n      age: 0,\r\n      currentSkill: '',\r\n      skills: [],\r\n      acceptedTerms: false, // added for our checkbox\r\n    }}\r\n    validationSchema={Schema.validSchema}\r\n    onSubmit={SubmitForm}\r\n  >\r\n    {props => {\r\n      return (\r\n        <Col className=\"text-input\" xs={20} sm={16}>\r\n          <div name=\"register\"></div>\r\n          <Form onSubmit={props.handleSubmit}\r\n            className=\"MyForm\">\r\n            <MyTextInput label=\"Name\" name=\"name\" type=\"text\" placeholder=\"Vasay\" />\r\n            <MyTextInput label=\"Password\" name=\"password\" type=\"password\" placeholder=\"password\" />\r\n            <MyTextInput\r\n              label=\"Password Confirmation\"\r\n              name=\"passwordConfirmation\"\r\n              type=\"password\"\r\n              placeholder=\"confirm password\"\r\n            />\r\n            <MyTextInput\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"jane@formik.com\"\r\n            />\r\n            <ErrorMessage name=\"Email\" />\r\n            <MyTextInput\r\n              label=\"Website\"\r\n              name=\"website\"\r\n              type=\"url\"\r\n              placeholder=\"http://www.site.com\"\r\n            />\r\n            <MyTextInput label=\"Age\" name=\"age\" type=\"number\" min={0} />\r\n      \r\n            <FieldArray\r\n              name=\"skills\"\r\n              render={arrayHelpers => {\r\n                const array = props.values.skills;\r\n               \r\n                return (\r\n                  <>\r\n                    Skills\r\n                    <div>\r\n                     \r\n                      <Field\r\n                        name=\"currentSkill\"\r\n                        onKeyPress={evt => {\r\n                          if (evt.key === \"Enter\") {\r\n                            evt.preventDefault();\r\n                            if (props.values.currentSkill.length > 0 ) {\r\n                              arrayHelpers.push(props.values.currentSkill);\r\n                              props.setFieldValue('currentSkill', '');\r\n                            }\r\n                          }\r\n                        }}\r\n                        className=\"inputSkill\"\r\n                      />\r\n                      <Button\r\n                        className=\"btn-add\"\r\n                        htmlType=\"button\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          if (props.values.currentSkill.length > 0) {\r\n                            arrayHelpers.push(props.values.currentSkill);\r\n                            props.setFieldValue('currentSkill', '');\r\n                          }\r\n                        }}\r\n                      >\r\n                        Add a Skill\r\n                      </Button>\r\n                      <div className=\"skillsWrapper\">\r\n                      {array\r\n                        .map((friend, index) => (\r\n                          <div key={index} style={{ marginRight: '20px' }}>\r\n                            <div className=\"skill\">\r\n                              {friend }  \r\n                              <Button\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                                htmlType=\"button\"\r\n                                onClick={() => arrayHelpers.remove(index)}\r\n                              >\r\n                              x\r\n                              </Button>                      \r\n                            </div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                );\r\n              }}\r\n            />\r\n            <MyCheckbox name=\"acceptedTerms\">I accept the terms and conditions</MyCheckbox>\r\n            <div className=\"send-div\">\r\n              {props.isSubmitting ? (\r\n                <Spin />\r\n              ) : (\r\n                <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </Form>\r\n        </Col>\r\n      );\r\n    }}\r\n  </Formik>\r\n);\r\n\r\nexport default MyForm;\r\n","import MyForm from \"./MyForm\";\r\n\r\nexport default MyForm;\r\n","import ContentWrapper from \"./ContentWrapper\";\r\n\r\nexport default ContentWrapper;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContentWrapper = props => {\r\n  const { children } = props;\r\n  return <div className='contentWrapper'>{children}</div>;\r\n};\r\n\r\nexport default ContentWrapper;\r\n\r\nContentWrapper.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n};\r\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nimport MyForm from '../MyForm';\r\nimport ContentWrapper from '../ContentWrapper';\r\n\r\nimport './App.scss';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <ContentWrapper>\r\n      <MyForm />\r\n    </ContentWrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}